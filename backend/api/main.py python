from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import asyncio
from typing import Dict, List
import uvicorn

from api.routes import auth, projects, ai_assistant, research, cad, collaboration, manufacturing
from core.database import init_db, close_db
from core.websocket_manager import ConnectionManager
from services.ai_router import AIRouter
from ml.cad_generator import CADGenerator
from services.research_engine import ResearchEngine

connection_manager = ConnectionManager()
ai_router = AIRouter()
cad_generator = CADGenerator()
research_engine = ResearchEngine()

@asynccontextmanager
async def lifespan(app: FastAPI):
    await init_db()
    await ai_router.initialize()
    await cad_generator.load_models()
    await research_engine.initialize()
    yield
    await close_db()
    await connection_manager.disconnect_all()

app = FastAPI(
    title="Caddy Engineering Ecosystem",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(projects.router, prefix="/api/projects", tags=["projects"])
app.include_router(ai_assistant.router, prefix="/api/ai", tags=["ai"])
app.include_router(research.router, prefix="/api/research", tags=["research"])
app.include_router(cad.router, prefix="/api/cad", tags=["cad"])
app.include_router(collaboration.router, prefix="/api/collaboration", tags=["collaboration"])
app.include_router(manufacturing.router, prefix="/api/manufacturing", tags=["manufacturing"])

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: str):
    await connection_manager.connect(websocket, client_id)
    try:
        while True:
            data = await websocket.receive_json()
            await connection_manager.handle_message(client_id, data)
    except Exception as e:
        print(f"WebSocket error: {e}")
    finally:
        await connection_manager.disconnect(client_id)

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
